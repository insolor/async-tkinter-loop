{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Asynchronous Tkinter Mainloop","text":"<p>Implementation of asynchronous <code>mainloop</code> for tkinter, the use of which allows using <code>async</code> handler functions. It is intended to be as simple to use as possible. No fancy unusual syntax or constructions - just use an alternative function instead of <code>root.mainloop()</code> and wrap asynchronous handlers into a helper function.</p> <p>Note Please, fill free to report bugs, add pull requests or share your thoughts / ask questions, etc. about the module.</p> <p>Based on ideas from:</p> <ul> <li>my answer on ru.stackoverflow.com: https://ru.stackoverflow.com/a/1043146</li> <li>answer of Terry Jan Reedy on stackoverflow.com:   https://stackoverflow.com/a/47896365</li> <li>answer of jfs on ru.stackoverflow.com:   https://ru.stackoverflow.com/a/804609</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Install the package with the following command:</p> <p><pre><code>pip install async-tkinter-loop\n</code></pre> or <pre><code>pip install async-tkinter-loop[examples]\n</code></pre></p> <ul> <li><code>[examples]</code> part is needed to install optional dependencies (such as <code>httpx</code> and <code>pillow</code>) to run some of the   examples. If you're not going to run examples, remove the <code>[examples]</code> part from the command</li> <li>Use <code>pip3</code> instead of <code>pip</code> on Linux systems to install the package for python3 (not python2)</li> <li>Probably you'll want to create a virtual environment for experiments with this library, but this is optional.</li> <li>If you want to try examples, download the entire repository as an archive (green \"code\" button on   the GitHub page \u2192   \"Download ZIP\"), unpack, run any example (of course, you need to install optional dependencies)</li> </ul>"},{"location":"#some-examples","title":"Some examples","text":"<p>Basic example: <pre><code>import asyncio\nimport tkinter as tk\n\nfrom async_tkinter_loop import async_handler, async_mainloop\n\n\nasync def counter():\n    i = 0\n    while True:\n        i += 1\n        label.config(text=str(i))\n        await asyncio.sleep(1.0)\n\n\nroot = tk.Tk()\n\nlabel = tk.Label(root)\nlabel.pack()\n\ntk.Button(root, text=\"Start\", command=async_handler(counter)).pack()\n\nasync_mainloop(root)\n</code></pre></p> <p>Also, <code>async_handler</code> function can be used as a decorator (but it makes a decorated function syncroneous):</p> <pre><code>import asyncio\nimport tkinter as tk\n\nfrom async_tkinter_loop import async_handler, async_mainloop\n\n\n@async_handler\nasync def counter():\n    i = 0\n    while True:\n        i += 1\n        label.config(text=str(i))\n        await asyncio.sleep(1.0)\n\n\nroot = tk.Tk()\n\nlabel = tk.Label(root)\nlabel.pack()\n\ntk.Button(root, text=\"Start\", command=counter).pack()\n\nasync_mainloop(root)\n</code></pre> <p>A more practical example, downloading an image from the Internet with httpx (you can use aiohttp as well) and displaying it in the Tkinter window:</p> <pre><code>import tkinter as tk\nfrom io import BytesIO\n\nimport httpx\nfrom PIL import Image, ImageTk\n\nfrom async_tkinter_loop import async_handler, async_mainloop\n\n\nasync def load_image(url):\n    button.config(state=tk.DISABLED)\n    label.config(text=\"Loading...\", image=\"\")\n\n    async with httpx.AsyncClient() as client:\n        response = await client.get(url, follow_redirects=True)\n        if response.status_code != 200:\n            label.config(text=f\"HTTP error {response.status_code}\")\n        else:\n            content = response.content\n            pil_image = Image.open(BytesIO(content))\n            image = ImageTk.PhotoImage(pil_image)\n            label.image = image\n            label.config(image=image, text=\"\")\n\n        button.config(state=tk.NORMAL)\n\n\nurl = \"https://picsum.photos/800/640\"\n\nroot = tk.Tk()\nroot.geometry(\"800x640\")\n\nbutton = tk.Button(root, text=\"Load an image\", command=async_handler(load_image, url))\nbutton.pack()\n\nlabel = tk.Label(root)\nlabel.pack(expand=1, fill=tk.BOTH)\n\nasync_mainloop(root)\n</code></pre> <p>More examples see in the <code>examples</code> directory.</p>"},{"location":"api/","title":"Library API","text":""},{"location":"api/#async_tkinter_loop.async_tkinter_loop.async_handler","title":"<code>async_handler(async_function, *args, event_loop=None, **kwargs)</code>","text":"<p>A helper function which allows to use async functions as command handlers (e.g. button click handlers) or event handlers.</p> <p>Parameters:</p> Name Type Description Default <code>async_function</code> <code>Callable[P, Coroutine[Any, Any, None]]</code> <p>async function</p> required <code>args</code> <code>Any</code> <p>positional parameters which will be passed to the async function</p> <code>()</code> <code>event_loop</code> <code>AbstractEventLoop | None</code> <p>asyncio event loop (optional, for testing purposes)</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>keyword parameters which will be passed to the async function</p> <code>{}</code> <p>Returns:</p> Type Description <code>Callable[P, None]</code> <p>A sync function, which runs the original async function in an async event loop.</p> <p>Usage examples: <pre><code>import tkinter as tk\nfrom async_tkinter_loop import async_handler\n\nasync def some_async_function():\n    print(\"Wait...\")\n    await asyncio.sleep(0.5)\n    print(\"Done!\")\n\nbutton = tk.Button(\"Press me\", command=async_handler(some_async_function))\n\n# ----\n\nasync def some_async_function(event):\n    print(\"Wait...\")\n    await asyncio.sleep(0.5)\n    print(\"Done!\")\n\nroot.bind(\"&lt;1&gt;\", command=async_handler(some_async_function))\n\n# ----\n\n# Also, it can be used as a decorator\n@async_handler\nasync def some_async_function():\n    print(\"Wait...\")\n    await asyncio.sleep(0.5)\n    print(\"Done!\")\n\nbutton = tk.Button(\"Press me\", command=some_async_function)\n</code></pre></p> Source code in <code>async_tkinter_loop/async_tkinter_loop.py</code> <pre><code>def async_handler(\n    async_function: Callable[P, Coroutine[Any, Any, None]],\n    *args: Any,  # noqa: ANN401\n    event_loop: asyncio.AbstractEventLoop | None = None,\n    **kwargs: Any,  # noqa: ANN401\n) -&gt; Callable[P, None]:\n    \"\"\"\n    A helper function which allows to use async functions as command handlers (e.g. button click handlers) or event\n    handlers.\n\n    Args:\n        async_function: async function\n        args: positional parameters which will be passed to the async function\n        event_loop: asyncio event loop (optional, for testing purposes)\n        kwargs: keyword parameters which will be passed to the async function\n\n    Returns:\n        A sync function, which runs the original async function in an async event loop.\n\n    Usage examples:\n    ```python\n    import tkinter as tk\n    from async_tkinter_loop import async_handler\n\n    async def some_async_function():\n        print(\"Wait...\")\n        await asyncio.sleep(0.5)\n        print(\"Done!\")\n\n    button = tk.Button(\"Press me\", command=async_handler(some_async_function))\n\n    # ----\n\n    async def some_async_function(event):\n        print(\"Wait...\")\n        await asyncio.sleep(0.5)\n        print(\"Done!\")\n\n    root.bind(\"&lt;1&gt;\", command=async_handler(some_async_function))\n\n    # ----\n\n    # Also, it can be used as a decorator\n    @async_handler\n    async def some_async_function():\n        print(\"Wait...\")\n        await asyncio.sleep(0.5)\n        print(\"Done!\")\n\n    button = tk.Button(\"Press me\", command=some_async_function)\n    ```\n    \"\"\"\n    @wraps(async_function)\n    def wrapper(*handler_args) -&gt; None:\n        loop = event_loop or get_event_loop()\n        loop.create_task(async_function(*handler_args, *args, **kwargs))\n\n    return wrapper\n</code></pre>"},{"location":"api/#async_tkinter_loop.async_tkinter_loop.async_mainloop","title":"<code>async_mainloop(root, event_loop=None)</code>","text":"<p>A function, which is a substitute to the standard <code>root.mainloop()</code>.</p> <p>Parameters:</p> Name Type Description Default <code>root</code> <code>Tk</code> <p>tkinter root object</p> required <code>event_loop</code> <code>AbstractEventLoop | None</code> <p>asyncio event loop (optional)</p> <code>None</code> Source code in <code>async_tkinter_loop/async_tkinter_loop.py</code> <pre><code>def async_mainloop(root: tk.Tk, event_loop: asyncio.AbstractEventLoop | None = None) -&gt; None:\n    \"\"\"\n    A function, which is a substitute to the standard `root.mainloop()`.\n\n    Args:\n        root: tkinter root object\n        event_loop: asyncio event loop (optional)\n    \"\"\"\n    event_loop = event_loop or asyncio.new_event_loop()\n    event_loop.run_until_complete(main_loop(root))\n</code></pre>"},{"location":"api/#async_tkinter_loop.async_tkinter_loop.get_event_loop","title":"<code>get_event_loop()</code>","text":"<p>A helper function which returns a running event loop.</p> <p>Returns:</p> Type Description <code>AbstractEventLoop</code> <p>event loop</p> Source code in <code>async_tkinter_loop/async_tkinter_loop.py</code> <pre><code>def get_event_loop() -&gt; asyncio.AbstractEventLoop:\n    \"\"\"\n    A helper function which returns a running event loop.\n\n    Returns:\n        event loop\n    \"\"\"\n    return asyncio.get_running_loop()\n</code></pre>"},{"location":"api/#async_tkinter_loop.async_tkinter_loop.main_loop","title":"<code>main_loop(root)</code>  <code>async</code>","text":"<p>An asynchronous implementation of tkinter mainloop. The function is not intended to be called directly from your code.</p> <p>Parameters:</p> Name Type Description Default <code>root</code> <code>Tk</code> <p>tkinter root window object</p> required Source code in <code>async_tkinter_loop/async_tkinter_loop.py</code> <pre><code>async def main_loop(root: tk.Tk) -&gt; None:\n    \"\"\"\n    An asynchronous implementation of tkinter mainloop. The function is not intended to be called directly from your\n    code.\n\n    Args:\n        root: tkinter root window object\n    \"\"\"\n    while True:\n        # Process all pending events\n        while root.dooneevent(_tkinter.DONT_WAIT) &gt; 0:\n            pass\n\n        try:\n            root.winfo_exists()  # Will throw TclError if the main window is destroyed\n        except tk.TclError:\n            break\n\n        await asyncio.sleep(0.01)\n</code></pre>"},{"location":"development/","title":"Installation for development","text":"<ol> <li>Install Poetry, e.g., with <code>pip install poetry</code> (<code>pip3 install poetry</code>) command    (other possible ways of installation see here)</li> <li>Download and unpack or clone the repository.</li> <li>Run the command <code>poetry install</code> or <code>poetry install -E examples</code> (the later command installs optional dependencies    needed to run some examples). This command will create <code>.venv</code> directory with a virtual environment and    install dependencies into it.</li> <li>Run any example with <code>poetry run python examples/sparks.py</code> (insert a file name of an example).</li> <li>Or activate the virtual environment with <code>poetry shell</code> and run an example with <code>python examples/sparks.py</code>      command. You can also open the directory with the project in some IDE (e.g., PyCharm or VS Code)       and select Python interpreter from the virtual environment as a project interpreter,      then run examples directly from the IDE.</li> </ol>"},{"location":"installation/","title":"Installation","text":"<p>Install the package with the following command:</p> <p><pre><code>pip install async-tkinter-loop\n</code></pre> or <pre><code>pip install async-tkinter-loop[examples]\n</code></pre></p> <ul> <li><code>[examples]</code> part is needed to install optional dependencies (such as <code>httpx</code> and <code>pillow</code>) to run some of the   examples. If you're not going to run examples, remove the <code>[examples]</code> part from the command</li> <li>Use <code>pip3</code> instead of <code>pip</code> on Linux systems to install the package for python3 (not python2)</li> <li>Probably you'll want to create a virtual environment for experiments with this library, but this is optional.</li> <li>If you want to try examples, download the entire repository as an archive (green \"code\" button on   the GitHub page \u2192   \"Download ZIP\"), unpack, run any example (of course, you need to install optional dependencies)</li> </ul>"},{"location":"similar_projects/","title":"Similar projects","text":"<ul> <li>Starwort/asynctk (on PyPi) - tries to wrap all widgets and make all their methods asyncroneous.    Most recent commit: October 2021.    GPL v3 license.</li> <li>gottadiveintopython/asynctkinter (on PyPi) - looks like an asynchronous framework itself (like trio).    Most recent commit: August 2023.    MIT License.</li> </ul> <p>The latter two projects use old <code>asyncio</code> code (from before <code>async</code>/<code>await</code> syntax addition):</p> <ul> <li>Lucretiel/tkinter-async - most recent commit: May 7, 2015</li> <li>fluentpython/asyncio-tkinter - most recent commit: Apr 5, 2015.</li> </ul>"}]}